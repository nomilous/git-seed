// Generated by CoffeeScript 1.4.0
var GitAction, GitSeed, colors, fs, w;

colors = require('colors');

GitSeed = require('nezkit').seed;

fs = require('fs');

w = require('when');

module.exports = GitAction = {
  gotDirectory: function(directory) {
    try {
      return fs.lstatSync(directory).isDirectory();
    } catch (error) {
      return false;
    }
  },
  isError: function() {
    return error === '';
  },
  showError: function() {
    return console.log(GitAction.error);
  },
  error: 'unknown or missing command',
  assign: function(program, onSuccess, onError, onNotify) {
    var plugin;
    if (typeof onSuccess === 'undefined' || typeof onError === 'undefined') {
      throw new Error('requires promise handlers');
    }
    GitAction.deferral = w.defer();
    GitAction.root = '.';
    GitAction.message = program.message;
    plugin = program.packageManager || 'npm';
    try {
      GitAction.plugin = require("git-seed-" + plugin);
    } catch (error) {
      console.log('(error) '.red + 'while loading plugin: ' + error.toString());
      process.exit(1);
    }
    return GitAction;
  },
  init: function() {
    console.log('(init)'.bold, 'scanning for git repositories in', GitAction.root, '\n');
    GitAction.error = '';
    try {
      if (!GitAction.gotDirectory(GitAction.root + '/.git')) {
        console.log('(fail)'.red, 'no git reposititory in', GitAction.root, '\n');
        process.exit(2);
      }
      return GitSeed.init(GitAction.root, GitAction.plugin);
    } catch (error) {
      console.log('(error) '.red + error.toString());
      return process.exit(3);
    }
  },
  status: function() {
    console.log('(status)'.bold, 'for all expected repositories in', GitAction.root, '\n');
    GitAction.error = '';
    try {
      return (new GitSeed(GitAction.root, GitAction.plugin)).status();
    } catch (error) {
      console.log('(error) '.red + error.toString());
      return process.exit(3);
    }
  },
  clone: function() {
    var seed;
    console.log('(clone)'.bold, 'all missing repositories in', GitAction.root, '\n');
    GitAction.error = '';
    seed = new GitSeed(GitAction.root, GitAction.plugin);
    return seed.clone(function(error, result) {
      if (error) {
        console.log('(error) '.red + error.toString());
        process.exit(4);
      }
      return process.exit(0);
    });
  },
  commit: function() {
    console.log('(commit)'.bold, 'on all repositories', 'with staged changes'.bold, 'in', GitAction.root, '\n');
    GitAction.error = '';
    return (new GitSeed(GitAction.root, GitAction.plugin)).commit(GitAction.message, function(error, result) {
      if (error) {
        console.log('(error) '.red + error.toString());
        process.exit(6);
      }
      return process.exit(0);
    });
  },
  push: function() {
    GitAction.error = '';
    process.exit(6);
    return process.exit(7);
  },
  pull: function() {
    var seed;
    console.log('(pull)'.bold, 'pull all where necessary', GitAction.root, '\n');
    GitAction.error = '';
    seed = new GitSeed(GitAction.root, GitAction.plugin);
    return seed.pull(null, function(error, result) {
      if (error) {
        console.log('(error) '.red + error.toString());
        process.exit(9);
      }
      seed = new GitSeed(GitAction.root, GitAction.plugin);
      return seed.pull(seed, function(error, result) {
        if (error) {
          console.log('(error) '.red + error.toString());
          process.exit(10);
        }
        return process.exit(0);
      });
    });
  }
};
