// Generated by CoffeeScript 1.4.0
var GitAction, GitSeed, colors, fs, w;

colors = require('colors');

console.log('remove colors');

GitSeed = require('nezkit').seed;

fs = require('fs');

w = require('when');

module.exports = GitAction = {
  gotDirectory: function(directory) {
    try {
      return fs.lstatSync(directory).isDirectory();
    } catch (error) {
      return false;
    }
  },
  isError: function() {
    return error === '';
  },
  showError: function() {
    return console.log(GitAction.error);
  },
  error: 'unknown or missing command',
  assign: function() {
    return GitAction.configure;
  },
  configure: function(program, onSuccess, onError, onNotify) {
    var plugin;
    if (typeof onSuccess === 'undefined' || typeof onError === 'undefined') {
      throw new Error('requires promise handlers');
    }
    GitAction.deferral = w.defer();
    GitAction.deferral.promise.then(onSuccess, onError, onNotify);
    GitAction.root = '.';
    GitAction.message = program.message;
    plugin = program.packageManager || 'npm';
    try {
      GitAction.plugin = require("git-seed-" + plugin);
    } catch (error) {
      console.log('(error) '.red + 'while loading plugin: ' + error.toString());
      process.exit(1);
    }
    return GitAction;
  },
  init: function() {
    if (typeof GitAction.deferral === 'undefined') {
      throw new Error('configure() was not called');
    }
    GitAction.deferral.notify({
      cli: {
        event: 'init',
        detail: "scanning for git repositories in '" + GitAction.root + "'"
      }
    });
    GitAction.error = '';
    if (!GitAction.gotDirectory(GitAction.root + '/.git')) {
      GitAction.deferral.reject(new Error("no git reposititory in '" + GitAction.root + "'"));
      return;
    }
    return GitSeed.init(GitAction.root, GitAction.plugin, GitAction.deferral);
  },
  status: function() {
    if (typeof GitAction.deferral === 'undefined') {
      throw new Error('configure() was not called');
    }
  },
  clone: function() {
    if (typeof GitAction.deferral === 'undefined') {
      throw new Error('configure() was not called');
    }
  },
  commit: function() {
    if (typeof GitAction.deferral === 'undefined') {
      throw new Error('configure() was not called');
    }
  },
  push: function() {
    if (typeof GitAction.deferral === 'undefined') {
      throw new Error('configure() was not called');
    }
  },
  pull: function() {
    if (typeof GitAction.deferral === 'undefined') {
      throw new Error('configure() was not called');
    }
  }
};
