// Generated by CoffeeScript 1.4.0
var GitRepo, GitTree, actionOn, colors, fs;

fs = require('fs');

colors = require('colors');

GitRepo = require('./git_repo');

actionOn = require('./tools/sync').series;

GitTree = (function() {

  GitTree.init = function(root, array) {
    var path, repoArray, seq, _i, _len;
    repoArray = [];
    seq = 0;
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      path = array[_i];
      repoArray.push(GitRepo.init(path, seq++));
    }
    return new GitTree(root, repoArray);
  };

  function GitTree(root, list) {
    this.root = root;
    this.control = "" + this.root + "/.nez_tree";
    if (list instanceof Array) {
      this.array = list;
    } else if (typeof list === 'undefined') {
      this.array = this.load();
    }
  }

  GitTree.prototype.save = function() {
    try {
      fs.writeFileSync("" + this.root + "/.nez_tree", JSON.stringify(this.array, null, 2));
      return console.log('(write)'.green, "" + this.root + "/.nez_tree");
    } catch (error) {
      console.log(error.red);
      throw error;
    }
  };

  GitTree.prototype.load = function() {
    var array, json, properties, _i, _len;
    try {
      if (!fs.lstatSync(this.control).isFile()) {
        throw '';
      }
    } catch (error) {
      require('./git_action').exitCode = 2;
      throw "explected control file: " + this.root + "/.nez_tree";
    }
    try {
      json = JSON.parse(fs.readFileSync(this.control));
      array = [];
      for (_i = 0, _len = json.length; _i < _len; _i++) {
        properties = json[_i];
        array.push(new GitRepo(properties));
      }
      return array;
    } catch (error) {
      require('./git_action').exitCode = 3;
      throw "error loading control file: " + this.root + "/.nez_tree " + (error.toString());
    }
  };

  GitTree.prototype.status = function() {
    var repo, _i, _len, _ref, _results;
    _ref = this.array;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      repo = _ref[_i];
      _results.push(repo.printStatus());
    }
    return _results;
  };

  GitTree.prototype.clone = function() {
    return actionOn(this.array, 'clone', null, function(error, result) {
      if (error) {
        throw error;
      }
    });
  };

  GitTree.prototype.commit = function(message) {
    return actionOn(this.array, 'commit', [message], function(error, result) {
      if (error) {
        throw error;
      }
    });
  };

  GitTree.prototype.noControl = function(ex) {
    var error;
    throw error = ex || new Error('Expected control file, not this:' + this.control);
  };

  return GitTree;

})();

module.exports = GitTree;
