// Generated by CoffeeScript 1.4.0
var GitAction, colors, notice, program;

program = require('commander');

colors = require('colors');

GitAction = require('./git_action');

notice = require('notice');

console.log('TODO: notice routability');

notice.configure({
  source: 'git-seed',
  messenger: function(msg) {
    var description, detail, label;
    description = msg.content.description;
    detail = msg.content.detail;
    switch (msg.context.tenor) {
      case 'good':
        label = ("(" + msg.content.label + ")").green;
        break;
      case 'bad':
        label = ("(" + msg.content.label + ")").red;
        break;
      default:
        label = ("(" + msg.content.label + ")").bold;
    }
    console.log("%s - %s", label, description);
    if (detail) {
      return console.log(detail);
    }
  }
});

program.option('    --package-manager [package_manager]', 'Calls package manager after each clone/pull (default npm)');

program.option('-m, --message         [commit_message]', 'Specify commit message');

program.option('-d, --as-daemon       [config_file]', '[NOT YET IMPLEMENTED] Run as a daemon.');

program.option('-p, --as-proxy        [config_file]', '[NOT YET IMPLEMENTED] Run as a distribution proxy.');

program.command('init').description('Assemble the initial .nez_tree control file into [root]').action(function() {
  var error, success;
  return GitAction.configure(program, success = function() {
    return console.log('DONE', arguments);
  }, error = function() {
    return console.log('ERROR', arguments);
  }, notice).init(arguments);
});

program.command('status').description('Git status across all nested git repos').action(function() {
  var error, success;
  return GitAction.configure(program, success = function() {
    return console.log('DONE', arguments);
  }, error = function() {
    return console.log('ERROR', arguments);
  }, notice).status(arguments);
});

program.command('clone').description('Git clone all missing nested git repos').action(function() {
  var error, success;
  return GitAction.configure(program, success = function() {
    return console.log('DONE', arguments);
  }, error = function() {
    return console.log('ERROR', arguments);
  }, notice).clone(arguments);
});

program.command('commit').description('Git commit across all nested repos with staged changes.').action(function() {
  var error, success;
  return GitAction.configure(program, success = function() {
    return console.log('DONE', arguments);
  }, error = function() {
    return console.log('ERROR', arguments);
  }, notice).commit(arguments);
});

program.command('pull').description('Git pull across all nested git repos.').action(function() {
  var error, success;
  return GitAction.configure(program, success = function() {
    return console.log('DONE', arguments);
  }, error = function() {
    return console.log('ERROR', arguments);
  }, notice).pull(arguments);
});

program.parse(process.argv);

if (GitAction.error) {
  GitAction.showError();
  process.exit(1);
}
