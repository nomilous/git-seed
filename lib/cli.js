// Generated by CoffeeScript 1.4.0
var Factory, GitAction, Notice, colors, notice, program;

program = require('commander');

colors = require('colors');

GitAction = require('./git_action');

Factory = require('notice');

Notice = require('notice');

notice = Notice.create('git-seed', function(msg, next) {
  var description, detail, title;
  description = msg.context.description;
  detail = msg.content.payload.detail;
  switch (msg.context.type) {
    case 'event':
      title = ("EVENT [" + msg.context.title + "]").bold;
      break;
    case 'info':
      title = " info (" + msg.context.title + ")";
      break;
    default:
      title = "" + msg.context.title;
  }
  switch (msg.context.tenor) {
    case 'good':
      title = title.green;
      break;
    case 'bad':
      title = title.red;
  }
  console.log("%s - %s", title.white, description);
  if (detail != null) {
    console.log(detail);
  }
  return next();
});

program.option('    --package-manager [package_manager]', 'Calls package manager after each clone/pull (default npm)');

program.option('-m, --message         [commit_message]', 'Specify commit message');

program.option('-d, --as-daemon       [config_file]', '[NOT YET IMPLEMENTED] Run as a daemon.');

program.option('-p, --as-proxy        [config_file]', '[NOT YET IMPLEMENTED] Run as a distribution proxy.');

program.command('init').description('Update the .git-seed control file').action(function() {
  var error, success;
  return GitAction.configure(program, success = function() {
    return console.log('DONE', arguments);
  }, error = function() {
    return console.log('ERROR', arguments);
  }, notice).init(arguments);
});

program.command('status').description('Status of all repos in the .git-seed').action(function() {
  var error, success;
  return GitAction.configure(program, success = function() {
    return console.log('DONE', arguments);
  }, error = function() {
    return console.log('ERROR', arguments);
  }, notice).status(arguments);
});

program.command('clone').description('Clone all missing repos in the .git-seed').action(function() {
  var error, success;
  return GitAction.configure(program, success = function() {
    return console.log('DONE', arguments);
  }, error = function() {
    return console.log('ERROR', arguments);
  }, notice).clone(arguments);
});

program.command('commit').description('Commit from all repos in the .git-seed (that have staged changes)').action(function() {
  var error, success;
  return GitAction.configure(program, success = function() {
    return console.log('DONE', arguments);
  }, error = function() {
    return console.log('ERROR', arguments);
  }, notice).commit(arguments);
});

program.command('pull').description('Pull into all repos in the .git-seed').action(function() {
  var error, success;
  return GitAction.configure(program, success = function() {
    return console.log('DONE', arguments);
  }, error = function() {
    return console.log('ERROR', arguments);
  }, notice).pull(arguments);
});

program.parse(process.argv);

if (GitAction.error) {
  GitAction.showError();
  process.exit(1);
}
