// Generated by CoffeeScript 1.4.0
var GitAction, colors, notice, program;

program = require('commander');

colors = require('colors');

GitAction = require('./git_action');

notice = require('notice');

console.log('TODO: notice routability');

notice.configure({
  source: 'git-seed',
  messenger: function(msg) {
    var description, detail, label;
    description = msg.content.description;
    detail = msg.content.detail;
    switch (msg.context.type) {
      case 'event':
        label = ("[" + msg.content.label + "]").bold;
        break;
      case 'info':
        label = "(" + msg.content.label + ")";
        break;
      default:
        label = "" + msg.content.label;
    }
    switch (msg.context.tenor) {
      case 'good':
        label = label.green;
        break;
      case 'bad':
        label = label.red;
        break;
      default:
        label = label.bold;
    }
    console.log("%s - %s", label, description);
    if (detail) {
      return console.log(detail);
    }
  }
});

program.option('    --package-manager [package_manager]', 'Calls package manager after each clone/pull (default npm)');

program.option('-m, --message         [commit_message]', 'Specify commit message');

program.option('-d, --as-daemon       [config_file]', '[NOT YET IMPLEMENTED] Run as a daemon.');

program.option('-p, --as-proxy        [config_file]', '[NOT YET IMPLEMENTED] Run as a distribution proxy.');

program.command('init').description('Update the .git-seed control file').action(function() {
  var error, success;
  return GitAction.configure(program, success = function() {
    return console.log('DONE', arguments);
  }, error = function() {
    return console.log('ERROR', arguments);
  }, notice).init(arguments);
});

program.command('status').description('Status of all repos in the .git-seed').action(function() {
  var error, success;
  return GitAction.configure(program, success = function() {
    return console.log('DONE', arguments);
  }, error = function() {
    return console.log('ERROR', arguments);
  }, notice).status(arguments);
});

program.command('clone').description('Clone all missing repos in the .git-seed').action(function() {
  var error, success;
  return GitAction.configure(program, success = function() {
    return console.log('DONE', arguments);
  }, error = function() {
    return console.log('ERROR', arguments);
  }, notice).clone(arguments);
});

program.command('commit').description('Commit from all repos in the .git-seed (that have staged changes)').action(function() {
  var error, success;
  return GitAction.configure(program, success = function() {
    return console.log('DONE', arguments);
  }, error = function() {
    return console.log('ERROR', arguments);
  }, notice).commit(arguments);
});

program.command('pull').description('Pull into all repos in the .git-seed').action(function() {
  var error, success;
  return GitAction.configure(program, success = function() {
    return console.log('DONE', arguments);
  }, error = function() {
    return console.log('ERROR', arguments);
  }, notice).pull(arguments);
});

program.parse(process.argv);

if (GitAction.error) {
  GitAction.showError();
  process.exit(1);
}
