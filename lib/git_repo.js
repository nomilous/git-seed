// Generated by CoffeeScript 1.4.0
var Git, GitRepo, Shell, seq, spawn;

Git = require('./tools/git');

Shell = require('./tools/shell');

spawn = require('child_process').spawn;

seq = 0;

GitRepo = (function() {

  GitRepo.init = function(workDir, seq) {
    return new GitRepo({
      root: seq === 0,
      path: workDir,
      origin: Git.showOrigin(workDir),
      branch: Git.showBranch(workDir),
      ref: Git.showRef(workDir)
    });
  };

  function GitRepo(properties) {
    var property;
    for (property in properties) {
      this[property] = properties[property];
      if (property === 'ref' && this.root) {
        this[property] = 'ROOT_REPO_REF';
      }
    }
  }

  GitRepo.prototype.printMissing = function() {
    console.log(("MISSING repo @ " + this.path + "\n").red);
    return false;
  };

  GitRepo.prototype.printStatus = function() {
    var status;
    if (!Shell.gotDirectory(this.path + '/.git')) {
      return this.printMissing();
    }
    console.log(("STATUS @ " + this.path).green.bold);
    status = Git.showStatus(this.path);
    return console.log(status + '\n');
  };

  GitRepo.prototype.testSpawn = function(command, opts, callback) {
    var child;
    console.log('spawning shell command "%s %s" in %s', command, opts.toString(), this.path);
    child = spawn(command, opts);
    child.stdout.pipe(process.stdout);
    child.stderr.pipe(process.stderr);
    return child.on('close', function(code, signal) {
      if (code > 0) {
        return callback(new Error(command + opts.join(' ') + ' exited with errorcode: ' + code));
      } else {
        return callback(null, 'ok' + seq++);
      }
    });
  };

  GitRepo.prototype.clone = function(callback) {
    var error;
    error = null;
    if (Shell.gotDirectory(this.path + '/.git')) {
      console.log('(skip)'.bold, "clone @ " + this.path);
      return callback(error);
    } else {
      return Git.clone(this.path, this.origin, this.branch, callback);
    }
  };

  GitRepo.prototype.checkout = function() {
    if (!Shell.gotDirectory(this.path + '/.git')) {
      return this.printMissing();
    }
  };

  return GitRepo;

})();

module.exports = GitRepo;
